/home/jovyan/repo/ximeng_project/split0.2_pytorch_VGG19.py:100: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  inputs = torch.tensor(inputs, dtype=torch.float32)
/home/jovyan/repo/ximeng_project/split0.2_pytorch_VGG19.py:124: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  inputs = torch.tensor(inputs, dtype=torch.float32)
Sequential(
  (0): Conv2d(5, 3, kernel_size=(3, 3), stride=(3, 3), bias=False)
  (1): VGG(
    (features): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace=True)
      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): ReLU(inplace=True)
      (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (6): ReLU(inplace=True)
      (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (8): ReLU(inplace=True)
      (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (11): ReLU(inplace=True)
      (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (13): ReLU(inplace=True)
      (14): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (15): ReLU(inplace=True)
      (16): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (17): ReLU(inplace=True)
      (18): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (19): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (20): ReLU(inplace=True)
      (21): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (22): ReLU(inplace=True)
      (23): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (24): ReLU(inplace=True)
      (25): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (26): ReLU(inplace=True)
      (27): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (28): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (29): ReLU(inplace=True)
      (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (31): ReLU(inplace=True)
      (32): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (33): ReLU(inplace=True)
      (34): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (35): ReLU(inplace=True)
      (36): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
    (classifier): Sequential(
      (0): Linear(in_features=25088, out_features=4096, bias=True)
      (1): ReLU(inplace=True)
      (2): Dropout(p=0.5, inplace=False)
      (3): Linear(in_features=4096, out_features=4096, bias=True)
      (4): ReLU(inplace=True)
      (5): Dropout(p=0.5, inplace=False)
      (6): Linear(in_features=4096, out_features=2, bias=True)
    )
  )
)
CUDA is available! Training on GPU...
Epoch: 1/5
Epoch: 001, Training: Loss: -51901262690177721258999808.0000, Accuracy: 80.3684%, 
		Validation: Loss: -51901262690177721258999808.0000, Accuracy: 81.0225%, Time: 8964.1481s
Best Accuracy for validation : 0.8102 at epoch 001
Epoch: 2/5
Epoch: 002, Training: Loss: -55453179227344298821287936.0000, Accuracy: 80.3684%, 
		Validation: Loss: -55453179227344298821287936.0000, Accuracy: 81.0225%, Time: 8809.8878s
Best Accuracy for validation : 0.8102 at epoch 001
Epoch: 3/5
Epoch: 003, Training: Loss: -57340008339280719272476672.0000, Accuracy: 80.3684%, 
		Validation: Loss: -57340008339280719272476672.0000, Accuracy: 81.0225%, Time: 8957.8391s
Best Accuracy for validation : 0.8102 at epoch 001
Epoch: 4/5
Epoch: 004, Training: Loss: -58969572670434292453605376.0000, Accuracy: 80.3684%, 
		Validation: Loss: -58969572670434292453605376.0000, Accuracy: 81.0225%, Time: 8884.4543s
Best Accuracy for validation : 0.8102 at epoch 001
Epoch: 5/5
Epoch: 005, Training: Loss: -60516237125915004614213632.0000, Accuracy: 80.3684%, 
		Validation: Loss: -60516237125915004614213632.0000, Accuracy: 81.0225%, Time: 8702.0773s
Best Accuracy for validation : 0.8102 at epoch 001
